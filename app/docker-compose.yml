version: "3.9"
services:
  db:
    image: postgres:15.0-alpine
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ginte
      - PGPORT=5432
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "3031:5432"
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ginte -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: app_backend
    build: ./backend
    ports:
      - 3035:3035
    working_dir: /app-backend
    volumes:
      - ./backend/src:/app-backend/src
    depends_on:
      db:
        condition: service_healthy
    environment:
      - APP_PORT=3035
      - AUTH_SECRET=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
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_HOST=db # Aqui usamos o nome do serviÃ§o no Docker Compose
      - DB_PORT=5432
    command: >
      sh -c "pnpm prisma migrate deploy &&
          pnpm prisma:seed &&
          pnpm run start"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3035 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
    networks:
      - app-network
      - postgres-network

  frontend:
    container_name: app_frontend
    build: ./frontend
    ports:
      - "3001:3000"  # Servindo o React na porta 3001
    working_dir: /app-frontend
    volumes:
      - ./frontend/src:/app-frontend/src
      - ./frontend/public:/app-frontend/public
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=http://localhost:3035 
    command: ["npm", "start"]
    healthcheck:
      test: ["CMD-SHELL", "pgrep node || exit 1"] 
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s 
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
  postgres-network:
